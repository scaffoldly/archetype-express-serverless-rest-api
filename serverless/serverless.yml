service: ${file(serverless.config.js):repositoryName}

frameworkVersion: ^2.2.0

plugins:
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-configuration{% if persistence == 'dynamodb' %}
  - serverless-dynamodb-local{% endif %}
  - serverless-plugin-resource-tagging
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  cfnRole: arn:${env:AWS_PARTITION, ""}:iam::${env:AWS_ACCOUNT_ID, ""}:role/${self:service}-cloudformation
  stage: ${opt:stage, "local"}
  logRetentionInDays: 1
  apiGateway:
    restApiId: ${env:AWS_REST_API_ID, ""}
    restApiRootResourceId: ${env:AWS_REST_API_ROOT_RESOURCE_ID, ""}
  tracing:
    lambda: true
  environment:
    SERVICE_NAME: ${self:service}
    STAGE: ${opt:stage, "local"}
  stackTags:
    ServiceName: ${self:service}
    ServiceStage: ${opt:stage, "local"}

functions:
  lambda-handler:
    role: arn:${env:AWS_PARTITION, ""}:iam::${env:AWS_ACCOUNT_ID, ""}:role/${self:service}-${opt:stage, "local"}
    handler: src/lambda.handler
    timeout: 30
    events:
      - http:
          path: /
          method: any
      - http:
          path: /
          method: options
      - http:
          path: /{proxy+}
          method: any
      - http:
          path: /{proxy+}
          method: options

{% if persistence == 'dynamodb' %}
  dynamodb-event-handler:
    role: arn:${env:AWS_PARTITION, ""}:iam::${env:AWS_ACCOUNT_ID, ""}:role/${self:service}-${opt:stage, "local"}
    handler: src/lambda.dynamoDbEventHandler
    timeout: 30
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          arn:
            Fn::GetAtt: [Table, StreamArn]
{% endif %}

  # sns-event-handler:
  #   role: arn:${env:AWS_PARTITION, ""}:iam::${env:AWS_ACCOUNT_ID, ""}:role/${self:service}-${opt:stage, "local"}
  #   handler: src/lambda.snsEventHandler
  #   timeout: 30
  #   events:
  #     - sns: ${opt:stage, "local"}-${self:service}

{% if persistence == 'dynamodb' %}
resources:
  Resources:
    Table:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${opt:stage, "local"}-${self:service}
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: sk-pk-index
            KeySchema:
              - AttributeName: sk
                KeyType: HASH
              - AttributeName: pk
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TimeToLiveSpecification:
          AttributeName: expires
          Enabled: true
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
        BillingMode: PAY_PER_REQUEST
{% endif %}

custom:
  serverless-offline:
    useChildProcesses: false
    noPrependStageInUrl: true
    prefix: ${file(serverless.config.js):serviceName}

  bundle:
    packager: yarn
    externals:
      - tsoa
    copyFiles:
      - from: 'public/*'
        to: './'

  serverless-configuration:
    local:
      del:
        - provider.apiGateway.restApiId
        - provider.apiGateway.restApiRootResourceId
{% if persistence == 'dynamodb' %}
  dynamodb:
    stages:
      - local
    start:
      port: 8100
      dbPath: .dynamodb
      migrate: true
{% endif %}
